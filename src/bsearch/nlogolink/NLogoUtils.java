package bsearch.nlogolink;

import java.io.IOException;
import java.util.LinkedHashMap;

import org.nlogo.agent.BooleanConstraint;
import org.nlogo.agent.ChooserConstraint;
import org.nlogo.agent.SliderConstraint;
import org.nlogo.api.ValueConstraint;
import org.nlogo.api.JobOwner;
import org.nlogo.api.LogoException;
import org.nlogo.core.CompilerException;
import org.nlogo.headless.HeadlessWorkspace;
import org.nlogo.nvm.Procedure;

public strictfp class NLogoUtils {
	public static final long MIN_EXACT_NETLOGO_INT = -9007199254740992L;
	public static final long MAX_EXACT_NETLOGO_INT = 9007199254740992L;
	
	private static HeadlessWorkspace emptyWorkspace; 

	public static Object evaluateNetLogoReporterInEmptyWorkspace(String reporterString ) throws NetLogoLinkException
	{
		if (emptyWorkspace == null)
		{
			emptyWorkspace = HeadlessWorkspace.newInstance();			
		}
		try {
			synchronized (emptyWorkspace) {
				return emptyWorkspace.report( reporterString );
			}
		} catch (Exception ex)
		{
			throw new NetLogoLinkException(ex.getMessage());
		}
	}		

	public static Procedure substituteVariablesAndCompile(String codeWithVariables, String[] varNames, HeadlessWorkspace workspace) throws NetLogoLinkException
	{
		String codeWithSubstitutions  = codeWithVariables;
		
		for (int i = 0; i < varNames.length; i++) {
			String varIdentifier = "@{"+varNames[i]+"}";
			codeWithSubstitutions = codeWithSubstitutions.replace(varIdentifier, " ([LABEL] OF TURTLE " + i + ") ");
		}

		try {
			return workspace.compileReporter(codeWithSubstitutions);
		} catch (CompilerException ex) {
			ex.printStackTrace();
			String errorMessage = "Check syntax, and that substitution @{XXX} variable names are correct." 
	                + "\n Some examples:  'MEAN @{NAME1}'  or  " 
	                + "'MAX (MAP [[x y] -> ABS (x - y)] @{MEASURE1} @{MEASURE3})'";
			throw new NetLogoLinkException("NetLogo reporter '" + codeWithVariables+ "' is problematic.  " + errorMessage);			
		}
		
	}	
	/**
	 * Implementation note/warning:  this method CLEARS ALL TURTLES in the workspace, and creates one (temporary) turtle for each variable
	 * holding the variable's value in the LABEL property.  Yes, it's a hack, but I couldn't think of any better way to be able
	 * to run code in the same model workspace *efficiently* (e.g. using local variables and dumping lists out to strings and back isn't efficient.))
	 * A more ideal solution would be to create new observer variables, so we wouldn't have to clear & use turtles. 
	 * Check: https://github.com/NetLogo/NetLogo/issues/1472
	 * 
	 * @param originalReporterBeforeSub - original reporter string before substitutions (for better debugging/error message)
	 * @param reporterContainingSubstitutions - a procedure generated by {@link #substituteVariablesAndCompile(String, String[], HeadlessWorkspace)
	 *                                            using the same variables in the SAME ORDER as used here.
	 * @param varsWithValues - an (ordered) Map of variable names to their values
	 * @param workspace - to evaluate the NL code in.
	 * @return the result of running the given procedure in NetLogo
	 * @throws NetLogoLinkException
	 */
	public static Object evaluateNetLogoWithSubstitution(String originalReporterBeforeSub, Procedure reporterContainingSubstitutions, String[] varNames, Object[] varValues, HeadlessWorkspace workspace, JobOwner owner) throws NetLogoLinkException
	{
		try {
			workspace.clearTurtles();
						
			for (int i = 0; i < varNames.length; i++) { 
				workspace.world().getOrCreateTurtle(i).setTurtleOrLinkVariable("LABEL", varValues[i]);
			}
//			if (originalReporterBeforeSub.contains("@{CONDENSED1}")) {
//
//				GeneralUtils.debug("num turtles: " + workspace.world().turtles().count());
//				GeneralUtils.debug("originalReporter: " + originalReporterBeforeSub);
//				GeneralUtils.debug("proc: " + reporterContainingSubstitutions.displayName());
//				GeneralUtils.debug("turtle 0 label: " + workspace.world().getTurtle(0).getTurtleOrLinkVariable("LABEL"));
//			}
		
			Object retVal = workspace.runCompiledReporter(owner, reporterContainingSubstitutions);
			if (retVal instanceof Exception) {
				throw (Exception) retVal;
			}
			return retVal;
			
		} catch (Exception ex)
		{
//			GeneralUtils.debug("turtle 0 label: " + workspace.world().getTurtle(0).getTurtleOrLinkVariable("LABEL"));
//			GeneralUtils.debug(Arrays.toString(varValues));
			ex.printStackTrace();
			throw new NetLogoLinkException("Problem evaluating NetLogo code '"+originalReporterBeforeSub + "'.\n" 
//					+ "(NOTE: the following error message may be confusing since BehaviorSearch substituted\n" 
//					+"([LABEL] OF TURTLE X) for each @{VAR} variable behind the scenes.)\n" 
					+ ex.getMessage());
		}
	}		

	

	public static HeadlessWorkspace createWorkspace()
	{
		HeadlessWorkspace workspace = HeadlessWorkspace.newInstance();
		return workspace;
	}
	/** If you don't call this method, there can still be one NetLogo workspace thread running in the background, which might
	 * prevent your application from shutting down naturally when main() is exited, for instance.  If you call
	 * System.exit(), then it might not matter whether you call this method first or not.  Perhaps it's good form
	 * to always call it before your application quits. */
	public static void fullyShutDownNetLogoLink()
	{
		try {
			emptyWorkspace.dispose();
		} catch (InterruptedException ex) {
			ex.printStackTrace();
		}
	}
	
	public static String getDefaultConstraintsText(String modelFileName) throws NetLogoLinkException
	{
		HeadlessWorkspace workspace = NLogoUtils.createWorkspace();

		try {
		  workspace.open(modelFileName);
		} catch (IOException e) {
			throw new NetLogoLinkException("I/O Error trying to open model file '" + modelFileName + "'\n " + e.toString(), e);
		} catch (CompilerException e) {
			throw new NetLogoLinkException("Model file '" + modelFileName + "' didn't compile: " + e.toString(), e);
		} catch (LogoException e) {
			throw new NetLogoLinkException("Unexpected error loading model: " + e.toString(), e);
		}

		StringBuilder sb = new StringBuilder();
		int numVars = workspace.world().observer().variables().length;
	    for (int i = 0; i < numVars; i++)
	    {
	    	ValueConstraint con = workspace.world().observer().constraint(i);
	    	if ( con != null)
	    	{
	    		String name = workspace.world().observerOwnsNameAt(i);
	    		sb.append("[\"");
	    		sb.append(name.toLowerCase());
	    		sb.append("\" ");
    			StringBuilder sb2 = new StringBuilder();
	    		if (con instanceof SliderConstraint)
	    		{
	    			SliderConstraint scon = (SliderConstraint) con;
    				double min = ((Double) scon.minimum().get()).doubleValue();
    				double incr = ((Double) scon.increment().get()).doubleValue();
    				double max = ((Double) scon.maximum().get()).doubleValue();
    				String strIncr = org.nlogo.api.Dump.logoObject(incr, true, false);

    				// if it's a non-integer slider with more than 100 factor levels, let's suggest continuous "C"
    				if (min != StrictMath.floor(min) && incr != StrictMath.floor(incr) &&
    						StrictMath.abs((max - min) / incr) > 100)
    				{
    					strIncr = "\"C\"";
    				}
    				sb2.append("[");
    				sb2.append(org.nlogo.api.Dump.logoObject(min, true, false));
    				sb2.append(" ");
    				sb2.append(strIncr);
    				sb2.append(" ");
    				sb2.append(org.nlogo.api.Dump.logoObject(max, true, false));
    				sb2.append("]");
	    		}
	    		else if (con instanceof ChooserConstraint)
	    		{
	    			ChooserConstraint ccon = (ChooserConstraint) con;
	    			for (Object obj: ccon.acceptedValues().javaIterable())
	    			{
		    			sb2.append(org.nlogo.api.Dump.logoObject(obj, true, false));
	    				sb2.append(" ");
	    			}
	    			sb2.setLength(sb2.length() - 1);
	    		}
	    		else if (con instanceof BooleanConstraint)
	    		{
	    			sb2.append(org.nlogo.api.Dump.logoObject(Boolean.TRUE, true, false));
    				sb2.append(" ");
	    			sb2.append(org.nlogo.api.Dump.logoObject(Boolean.FALSE, true, false));
	    		}
	    		else
	    		{
	    			sb2.append(org.nlogo.api.Dump.logoObject(con.defaultValue(), true, false));
	    		}
	    		sb.append(sb2);
	    		sb.append("]\n");
	    	}
	    }
	    try {
			workspace.dispose();
		} catch (InterruptedException e) {
		}
	    return sb.toString();
	}

	/**
	 * Creates a handy string of text that you could copy/paste into the NetLogo command center to set up a model    
	 * @param paramSettings - the desired parameter settings
	 * @param seed - the random seed to use, or null if none. 
	 * @return the string of text to execute in NetLogo   
	 */
	public static String buildNetLogoCommandCenterString(LinkedHashMap<String,Object> paramSettings, Integer seed) {
		StringBuilder sb = new StringBuilder();
		if (seed != null) {
			sb.append("random-seed ");
			sb.append(seed);
			sb.append(' ');
		}
		for (String param : paramSettings.keySet()) {
			Object val = paramSettings.get(param);
			sb.append("set ");
			sb.append(param);
			sb.append(' ');
			sb.append(org.nlogo.api.Dump.logoObject(val, true, false));
			sb.append(' ');
		}
		sb.setLength(sb.length()-1); // chop off the final ' '
		return sb.toString();		 
	}			
}
